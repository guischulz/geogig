/* Copyright (c) 2016 Boundless and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Distribution License v1.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/edl-v10.html
 *
 * Contributors:
 * Erik Merkle (Boundless) - initial implementation
 */
package org.locationtech.geogig.rest.repository;

import static org.locationtech.geogig.repository.Hints.REPOSITORY_NAME;
import static org.locationtech.geogig.repository.Hints.REPOSITORY_URL;
import static org.locationtech.geogig.rest.repository.InitRequestUtil.REPO_ATTR;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Map;

import org.eclipse.jdt.annotation.Nullable;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.locationtech.geogig.repository.Hints;
import org.locationtech.geogig.repository.RepositoryConnectionException;
import org.locationtech.geogig.spring.config.GeoGigWebAPISpringConfig;
import org.locationtech.geogig.spring.dto.InitRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.beust.jcommander.internal.Maps;
import com.google.common.base.Optional;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = { GeoGigWebAPISpringConfig.class })
@WebAppConfiguration
public class InitRequestUtilTest {

    @Autowired
    private WebApplicationContext appContext;

    @Rule
    public TemporaryFolder repoFolder = new TemporaryFolder();

    private MockMvc mockMvc;

    @Before
    public void setup() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.appContext).build();
    }

    private MockHttpServletRequest buildRequest(@Nullable String content,
            @Nullable MediaType contentType) {
        MockHttpServletRequestBuilder request = MockMvcRequestBuilders.put("fake uri");
        request.requestAttr(REPO_ATTR, "testRepo");
        if (content != null) {
            request.content(content);
        }
        if (contentType != null) {
            request.contentType(contentType);
        }
        return request.buildRequest(appContext.getServletContext());
    }

    private void assertRepositoryName(Hints hints) {
        Assert.assertTrue("Expected a Hints object to be created", hints != null);
        Assert.assertEquals("Incorrect Repository Name", "testRepo",
                hints.get(REPOSITORY_NAME).get());
    }

    @Test
    public void testCreateGeoGIG_RepositoryName() throws URISyntaxException, IOException, UnsupportedEncodingException,
            RepositoryConnectionException {
        Map<String, String> params = Maps.newHashMap();
        Hints hints = InitRequestUtil.createHintsFromParameters("testRepo", params);

        // assert the correct Repository Name is in the Hints
        assertRepositoryName(hints);
        // REPOSITORY_URI should NOT be set in the Hints, it should be generated by the Repository
        // Manager
        Optional<Serializable> repoURL = hints.get(REPOSITORY_URL);
        Assert.assertFalse("Expected REPOSIOTRY_URL to be ABSENT", repoURL.isPresent());
    }

    @Test
    public void testFileRepo() throws URISyntaxException, IOException, UnsupportedEncodingException,
            RepositoryConnectionException {
        // temp directory for the repo
        File repoDir = repoFolder.getRoot().getAbsoluteFile().getCanonicalFile();
        InitRequest request = new InitRequest();
        request.setParentDirectory(repoDir.getCanonicalPath());
        // create the Hints from the Request
        Hints hints = InitRequestUtil.createHintsFromParameters("testRepo",
                request.getParameters());
        // assert the correct Repository Name is in the Hints
        assertRepositoryName(hints);
        // REPOSITORY_URI should be set in the Hints
        Optional<Serializable> repoURL = hints.get(REPOSITORY_URL);
        Assert.assertTrue("Expected REPOSIOTRY_URL to be PRESENT", repoURL.isPresent());
        URI actual = URI.create(repoURL.get().toString());
        File actualParent = new File(actual).getParentFile();
        Assert.assertEquals("Repository Parent Directory does not match", repoDir, actualParent);
    }

    @Test
    public void testPGRepo() throws URISyntaxException, IOException, UnsupportedEncodingException,
            RepositoryConnectionException {
        InitRequest request = new InitRequest();
        request.setDbName("pgDatabaseName").setDbPassword("fakePassword").setDbSchema("fakeSchema")
                .setDbUser("fakeUser").setDbHost("fakeHost").setDbPort(8899);

        Hints hints = InitRequestUtil.createHintsFromParameters("testRepo",
                request.getParameters());
        // assert the correct Repository Name is in the Hints
        assertRepositoryName(hints);
        // REPOSITORY_URI should be set in the Hints
        Optional<Serializable> repoURL = hints.get(REPOSITORY_URL);
        Assert.assertTrue("Expected REPOSIOTRY_URL to be PRESENT", repoURL.isPresent());
        URI actual = URI.create(repoURL.get().toString());
        Assert.assertEquals("Unexpected URI Scheme", "postgresql", actual.getScheme());
        // assert the attributes we built into the JSON request
        Assert.assertEquals("Unexpected URI Scheme", "postgresql", actual.getScheme());
        Assert.assertEquals("Unexpected URI Host", "fakeHost", actual.getHost());
        Assert.assertEquals("Unexpected URI Port", 8899, actual.getPort());
        Assert.assertEquals("Unexpected URI Path", "/pgDatabaseName/fakeSchema/testRepo", actual.getPath());
        Assert.assertEquals("Unexpected URI Query", "user=fakeUser&password=fakePassword", actual.getQuery());
    }
}
